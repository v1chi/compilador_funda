
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftGTLTEQleftPLUSMINUSleftTIMESDIVIDEMODAND ASSIGN COMA DEC DIVIDE ELSE EQ FLOAT_TYPE FUNCTION GT ID INTEGER_TYPE LAMBDA LBRACE LOOP LPAREN LT MINUS MOD NOT NUM OR OUT PLUS RBRACE RETURN RPAREN SEMI STRING_TYPE TIMES TXT WHENprogram : declarationsdeclarations : declaration\n                    | declarations declarationdeclaration : variable_declaration\n                   | function_declaration\n                   | conditional\n                   | loop\n                   | outputvariable_declaration : INTEGER_TYPE ID ASSIGN expression SEMI\n                            | FLOAT_TYPE ID ASSIGN expression SEMI\n                            | STRING_TYPE ID ASSIGN TXT SEMIfunction_declaration : FUNCTION ID LPAREN parameters RPAREN LBRACE declarations return_statement RBRACE\n                            | FUNCTION ID LPAREN parameters RPAREN LBRACE declarations RBRACEparameters : parameter\n                  | parameters COMA parameter\n                  | emptyparameter : INTEGER_TYPE ID\n                 | FLOAT_TYPE ID\n                 | STRING_TYPE IDreturn_statement : RETURN expression SEMIconditional : WHEN logical_expression LBRACE declarations RBRACE ELSE LBRACE declarations RBRACE\n                   | WHEN logical_expression LBRACE declarations RBRACEloop : LOOP ID LPAREN expression COMA expression RPAREN LBRACE declarations RBRACEoutput : OUT expression SEMI\n              | OUT TXT SEMIexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | function_callfunction_call : ID LPAREN arguments RPARENarguments : expression\n                 | arguments COMA expression\n                 | emptyterm : factor\n            | term TIMES factor\n            | term DIVIDE factor\n            | term MOD factorfactor : NUM\n              | DEC\n              | ID\n              | LPAREN expression RPARENcomparison : expression GT expression\n                  | expression LT expression\n                  | expression EQ expressionlogical_expression : comparison\n                          | logical_expression OR comparison\n                          | logical_expression AND comparisonempty :'
    
_lr_action_items = {'INTEGER_TYPE':([0,2,3,4,5,6,7,8,16,37,38,52,53,63,80,81,82,84,88,92,97,98,101,103,104,105,107,108,110,],[9,9,-2,-4,-5,-6,-7,-8,-3,60,9,-24,-25,9,-9,-10,-11,60,-22,9,9,9,-13,9,9,-12,-21,9,-23,]),'FLOAT_TYPE':([0,2,3,4,5,6,7,8,16,37,38,52,53,63,80,81,82,84,88,92,97,98,101,103,104,105,107,108,110,],[10,10,-2,-4,-5,-6,-7,-8,-3,61,10,-24,-25,10,-9,-10,-11,61,-22,10,10,10,-13,10,10,-12,-21,10,-23,]),'STRING_TYPE':([0,2,3,4,5,6,7,8,16,37,38,52,53,63,80,81,82,84,88,92,97,98,101,103,104,105,107,108,110,],[11,11,-2,-4,-5,-6,-7,-8,-3,62,11,-24,-25,11,-9,-10,-11,62,-22,11,11,11,-13,11,11,-12,-21,11,-23,]),'FUNCTION':([0,2,3,4,5,6,7,8,16,38,52,53,63,80,81,82,88,92,97,98,101,103,104,105,107,108,110,],[12,12,-2,-4,-5,-6,-7,-8,-3,12,-24,-25,12,-9,-10,-11,-22,12,12,12,-13,12,12,-12,-21,12,-23,]),'WHEN':([0,2,3,4,5,6,7,8,16,38,52,53,63,80,81,82,88,92,97,98,101,103,104,105,107,108,110,],[13,13,-2,-4,-5,-6,-7,-8,-3,13,-24,-25,13,-9,-10,-11,-22,13,13,13,-13,13,13,-12,-21,13,-23,]),'LOOP':([0,2,3,4,5,6,7,8,16,38,52,53,63,80,81,82,88,92,97,98,101,103,104,105,107,108,110,],[14,14,-2,-4,-5,-6,-7,-8,-3,14,-24,-25,14,-9,-10,-11,-22,14,14,14,-13,14,14,-12,-21,14,-23,]),'OUT':([0,2,3,4,5,6,7,8,16,38,52,53,63,80,81,82,88,92,97,98,101,103,104,105,107,108,110,],[15,15,-2,-4,-5,-6,-7,-8,-3,15,-24,-25,15,-9,-10,-11,-22,15,15,15,-13,15,15,-12,-21,15,-23,]),'$end':([1,2,3,4,5,6,7,8,16,52,53,80,81,82,88,101,105,107,110,],[0,-1,-2,-4,-5,-6,-7,-8,-3,-24,-25,-9,-10,-11,-22,-13,-12,-21,-23,]),'RBRACE':([3,4,5,6,7,8,16,52,53,63,80,81,82,88,97,100,101,103,105,107,108,109,110,],[-2,-4,-5,-6,-7,-8,-3,-24,-25,88,-9,-10,-11,-22,101,105,-13,107,-12,-21,110,-20,-23,]),'RETURN':([3,4,5,6,7,8,16,52,53,80,81,82,88,97,101,105,107,110,],[-2,-4,-5,-6,-7,-8,-3,-24,-25,-9,-10,-11,-22,102,-13,-12,-21,-23,]),'ID':([9,10,11,12,13,14,15,28,34,35,39,40,41,42,43,44,45,46,47,48,49,51,60,61,62,90,91,102,],[17,18,19,20,27,31,27,27,27,27,27,27,27,27,27,70,70,70,70,70,27,27,85,86,87,27,27,27,]),'NUM':([13,15,28,34,35,39,40,41,42,43,44,45,46,47,48,49,51,90,91,102,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'DEC':([13,15,28,34,35,39,40,41,42,43,44,45,46,47,48,49,51,90,91,102,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'LPAREN':([13,15,20,27,28,31,34,35,39,40,41,42,43,44,45,46,47,48,49,51,90,91,102,],[28,28,37,49,28,51,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'TXT':([15,36,],[33,56,]),'ASSIGN':([17,18,19,],[34,35,36,]),'LBRACE':([21,22,24,25,26,27,29,30,64,65,66,67,68,69,70,71,72,73,74,78,83,89,94,99,],[38,-45,-26,-29,-34,-40,-38,-39,-46,-47,-42,-43,-44,-27,-40,-28,-35,-36,-37,-41,92,-30,98,104,]),'OR':([21,22,24,25,26,27,29,30,64,65,66,67,68,69,70,71,72,73,74,78,89,],[39,-45,-26,-29,-34,-40,-38,-39,-46,-47,-42,-43,-44,-27,-40,-28,-35,-36,-37,-41,-30,]),'AND':([21,22,24,25,26,27,29,30,64,65,66,67,68,69,70,71,72,73,74,78,89,],[40,-45,-26,-29,-34,-40,-38,-39,-46,-47,-42,-43,-44,-27,-40,-28,-35,-36,-37,-41,-30,]),'GT':([23,24,25,26,27,29,30,69,70,71,72,73,74,78,89,],[41,-26,-29,-34,-40,-38,-39,-27,-40,-28,-35,-36,-37,-41,-30,]),'LT':([23,24,25,26,27,29,30,69,70,71,72,73,74,78,89,],[42,-26,-29,-34,-40,-38,-39,-27,-40,-28,-35,-36,-37,-41,-30,]),'EQ':([23,24,25,26,27,29,30,69,70,71,72,73,74,78,89,],[43,-26,-29,-34,-40,-38,-39,-27,-40,-28,-35,-36,-37,-41,-30,]),'PLUS':([23,24,25,26,27,29,30,32,50,54,55,66,67,68,69,70,71,72,73,74,76,78,79,89,95,96,106,],[44,-26,-29,-34,-40,-38,-39,44,44,44,44,44,44,44,-27,-40,-28,-35,-36,-37,44,-41,44,-30,44,44,44,]),'MINUS':([23,24,25,26,27,29,30,32,50,54,55,66,67,68,69,70,71,72,73,74,76,78,79,89,95,96,106,],[45,-26,-29,-34,-40,-38,-39,45,45,45,45,45,45,45,-27,-40,-28,-35,-36,-37,45,-41,45,-30,45,45,45,]),'SEMI':([24,25,26,27,29,30,32,33,54,55,56,69,70,71,72,73,74,78,89,106,],[-26,-29,-34,-40,-38,-39,52,53,80,81,82,-27,-40,-28,-35,-36,-37,-41,-30,109,]),'RPAREN':([24,25,26,27,29,30,37,49,50,57,58,59,69,70,71,72,73,74,75,76,77,78,85,86,87,89,93,95,96,],[-26,-29,-34,-40,-38,-39,-48,-48,78,83,-14,-16,-27,-40,-28,-35,-36,-37,89,-31,-33,-41,-17,-18,-19,-30,-15,-32,99,]),'COMA':([24,25,26,27,29,30,37,49,57,58,59,69,70,71,72,73,74,75,76,77,78,79,85,86,87,89,93,95,],[-26,-29,-34,-40,-38,-39,-48,-48,84,-14,-16,-27,-40,-28,-35,-36,-37,90,-31,-33,-41,91,-17,-18,-19,-30,-15,-32,]),'TIMES':([24,26,27,29,30,69,70,71,72,73,74,78,],[46,-34,-40,-38,-39,46,-40,46,-35,-36,-37,-41,]),'DIVIDE':([24,26,27,29,30,69,70,71,72,73,74,78,],[47,-34,-40,-38,-39,47,-40,47,-35,-36,-37,-41,]),'MOD':([24,26,27,29,30,69,70,71,72,73,74,78,],[48,-34,-40,-38,-39,48,-40,48,-35,-36,-37,-41,]),'ELSE':([88,],[94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([0,38,92,98,104,],[2,63,97,103,108,]),'declaration':([0,2,38,63,92,97,98,103,104,108,],[3,16,3,16,3,16,3,16,3,16,]),'variable_declaration':([0,2,38,63,92,97,98,103,104,108,],[4,4,4,4,4,4,4,4,4,4,]),'function_declaration':([0,2,38,63,92,97,98,103,104,108,],[5,5,5,5,5,5,5,5,5,5,]),'conditional':([0,2,38,63,92,97,98,103,104,108,],[6,6,6,6,6,6,6,6,6,6,]),'loop':([0,2,38,63,92,97,98,103,104,108,],[7,7,7,7,7,7,7,7,7,7,]),'output':([0,2,38,63,92,97,98,103,104,108,],[8,8,8,8,8,8,8,8,8,8,]),'logical_expression':([13,],[21,]),'comparison':([13,39,40,],[22,64,65,]),'expression':([13,15,28,34,35,39,40,41,42,43,49,51,90,91,102,],[23,32,50,54,55,23,23,66,67,68,76,79,95,96,106,]),'term':([13,15,28,34,35,39,40,41,42,43,44,45,49,51,90,91,102,],[24,24,24,24,24,24,24,24,24,24,69,71,24,24,24,24,24,]),'function_call':([13,15,28,34,35,39,40,41,42,43,49,51,90,91,102,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'factor':([13,15,28,34,35,39,40,41,42,43,44,45,46,47,48,49,51,90,91,102,],[26,26,26,26,26,26,26,26,26,26,26,26,72,73,74,26,26,26,26,26,]),'parameters':([37,],[57,]),'parameter':([37,84,],[58,93,]),'empty':([37,49,],[59,77,]),'arguments':([49,],[75,]),'return_statement':([97,],[100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','parser.py',6),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',11),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',12),
  ('declaration -> variable_declaration','declaration',1,'p_declaration','parser.py',20),
  ('declaration -> function_declaration','declaration',1,'p_declaration','parser.py',21),
  ('declaration -> conditional','declaration',1,'p_declaration','parser.py',22),
  ('declaration -> loop','declaration',1,'p_declaration','parser.py',23),
  ('declaration -> output','declaration',1,'p_declaration','parser.py',24),
  ('variable_declaration -> INTEGER_TYPE ID ASSIGN expression SEMI','variable_declaration',5,'p_variable_declaration','parser.py',29),
  ('variable_declaration -> FLOAT_TYPE ID ASSIGN expression SEMI','variable_declaration',5,'p_variable_declaration','parser.py',30),
  ('variable_declaration -> STRING_TYPE ID ASSIGN TXT SEMI','variable_declaration',5,'p_variable_declaration','parser.py',31),
  ('function_declaration -> FUNCTION ID LPAREN parameters RPAREN LBRACE declarations return_statement RBRACE','function_declaration',9,'p_function_declaration','parser.py',37),
  ('function_declaration -> FUNCTION ID LPAREN parameters RPAREN LBRACE declarations RBRACE','function_declaration',8,'p_function_declaration','parser.py',38),
  ('parameters -> parameter','parameters',1,'p_parameters','parser.py',47),
  ('parameters -> parameters COMA parameter','parameters',3,'p_parameters','parser.py',48),
  ('parameters -> empty','parameters',1,'p_parameters','parser.py',49),
  ('parameter -> INTEGER_TYPE ID','parameter',2,'p_parameter','parser.py',57),
  ('parameter -> FLOAT_TYPE ID','parameter',2,'p_parameter','parser.py',58),
  ('parameter -> STRING_TYPE ID','parameter',2,'p_parameter','parser.py',59),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','parser.py',64),
  ('conditional -> WHEN logical_expression LBRACE declarations RBRACE ELSE LBRACE declarations RBRACE','conditional',9,'p_conditional','parser.py',69),
  ('conditional -> WHEN logical_expression LBRACE declarations RBRACE','conditional',5,'p_conditional','parser.py',70),
  ('loop -> LOOP ID LPAREN expression COMA expression RPAREN LBRACE declarations RBRACE','loop',10,'p_loop','parser.py',78),
  ('output -> OUT expression SEMI','output',3,'p_output','parser.py',83),
  ('output -> OUT TXT SEMI','output',3,'p_output','parser.py',84),
  ('expression -> term','expression',1,'p_expression','parser.py',89),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',90),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',91),
  ('expression -> function_call','expression',1,'p_expression','parser.py',92),
  ('function_call -> ID LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',102),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',107),
  ('arguments -> arguments COMA expression','arguments',3,'p_arguments','parser.py',108),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',109),
  ('term -> factor','term',1,'p_term','parser.py',117),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',118),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',119),
  ('term -> term MOD factor','term',3,'p_term','parser.py',120),
  ('factor -> NUM','factor',1,'p_factor','parser.py',132),
  ('factor -> DEC','factor',1,'p_factor','parser.py',133),
  ('factor -> ID','factor',1,'p_factor','parser.py',134),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',135),
  ('comparison -> expression GT expression','comparison',3,'p_comparison','parser.py',143),
  ('comparison -> expression LT expression','comparison',3,'p_comparison','parser.py',144),
  ('comparison -> expression EQ expression','comparison',3,'p_comparison','parser.py',145),
  ('logical_expression -> comparison','logical_expression',1,'p_logical_expression','parser.py',155),
  ('logical_expression -> logical_expression OR comparison','logical_expression',3,'p_logical_expression','parser.py',156),
  ('logical_expression -> logical_expression AND comparison','logical_expression',3,'p_logical_expression','parser.py',157),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',167),
]
